@page "/todo"
@rendermode InteractiveServer
@* 
    Blazor 应用中的代码有两种托管模型：

        1.Blazor Server：在此模型中，应用是在 ASP.NET Core 应用的 Web 服务器上执行的。 
            客户端上的 UI 更新、事件和 JavaScript 调用通过客户端与服务器之间的 SignalR 连接发送。 
            在此模块中，我们将讨论此模型并为其编写代码。
        2.Blazor WebAssembly：在此模型中，Blazor 应用、其依赖项以及 .NET 运行时均在浏览器中下载并运行。
*@

<h3>Todo (@todos.Count(todo => !todo.IsDone))</h3>
<input @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>
<ul>
    @foreach (var todo in todos)
    {
        <li>
            <input type="checkbox" @bind="todo.IsDone" />
            <input @bind="todo.Title" />
        </li>
    }
</ul>
@code {
    private List<TodoItem> todos = [];

    string newTodo = "";

    void AddTodo(){
        if (!string.IsNullOrWhiteSpace(newTodo)){
            todos.Add(new TodoItem()
                {
                    Title = newTodo,
                    IsDone = false
                });

            newTodo = "";
        }
    }
}